trigger:
  - master

variables:
  default_toolchain: nightly
  default_vm: macos-10.13

jobs:
  - job: clippy
    displayName: Lint code
    continueOnError: true
    pool:
      vmImage: $(default_vm)
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          rust_toolchain: $(default_toolchain)
      - script: |
          rustup component add clippy
          cargo clippy --version
        displayName: Install clippy
      - script: |
          cargo -q clippy --all-targets --all-features --message-format short -- -D warnings
        displayName: Run clippy

  - job: rustfmt
    displayName: Check code formatting
    continueOnError: true
    pool:
      vmImage: $(default_vm)
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          rust_toolchain: $(default_toolchain)
      - script: |
          rustup component add rustfmt
          cargo fmt --version
        displayName: Install rustfmt
      - script: |
          cargo fmt --all -- --check
        displayName: Run rustfmt

  - job: docs
    displayName: Check docs
    continueOnError: true
    pool:
      vmImage: $(default_vm)
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          rust_toolchain: $(default_toolchain)
      - script: |
          cargo install cargo-deadlinks
          cargo deadlinks --version
        displayName: Install deadlinks
      - script: |
          cargo doc --no-deps
          cargo deadlinks --dir target/doc/file_store
        displayName: Run clippy

  - job: coverage
    displayName: Generate code coverage
    continueOnError: true
    pool:
      vmImage: ubuntu-16.04
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          rust_toolchain: $(default_toolchain)
      - script: |
          git checkout $BRANCH
          git reset --hard $CHANGESET
          git show --oneline
        displayName: Set correct branch name
        env:
          BRANCH: $(Build.SourceBranchName)
          CHANGESET: $(Build.SourceVersion)
      - script: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --version
        displayName: Install tarpaulin
      - script: |
          env
        displayName: Check environment
        env:
          CI_NAME: azure
          CI_BUILD_NUMBER: $(Build.BuildId)
          CI_JOB_ID: $(Build.BuildId)
          CI_BUILD_URL: ${{ format('https://dev.azure.com/FractalBrew/{0}/_build/results?buildId={1}', variables['System.TeamProjectId'], variables['Build.Build_BuildId']) }}
          CI_BRANCH: $(Build.SourceBranchName)
      - script: |
          cargo tarpaulin --debug --release --ciserver azure --coveralls $COVERALLS_TOKEN --ignore-tests
        displayName: Measure branch coverage
        env:
          CI_NAME: azure
          CI_BUILD_NUMBER: $(Build.BuildId)
          CI_JOB_ID: $(Build.BuildId)
          CI_BUILD_URL: ${{ format('https://dev.azure.com/FractalBrew/{0}/_build/results?buildId={1}', variables['System.TeamProjectId'], variables['Build.Build_BuildId']) }}
          CI_BRANCH: $(Build.SourceBranchName)
          COVERALLS_TOKEN: $(coveralls_token)

  - job: tests
    displayName: Run tests
    continueOnError: false
    strategy:
      matrix:
        linux-nightly:
          platform: "ubuntu-16.04"
          toolchain: "nightly"
        mac-nightly:
          platform: "macos-10.13"
          toolchain: "nightly"
        windows-nightly:
          platform: "vs2017-win2016"
          toolchain: "nightly"
    pool:
      vmImage: $(platform)
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          rust_toolchain: $(toolchain)
      - script: |
          cargo test --all --release
        displayName: Run tests
